package com.ruomm.appcorex.greendao.dbstore;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "DBENTRY_VALUE".
 */
public class DBEntryValueDao extends AbstractDao<DBEntryValue, Long> {

    public final static String TABLENAME = "DBENTRY_VALUE";

    /**
     * Properties of entity DBEntryValue.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "id");
        public final static Property Key = new Property(1, String.class, "key", false, "key");
        public final static Property Tag = new Property(2, String.class, "tag", false, "tag");
        public final static Property ValueTag = new Property(3, String.class, "valueTag", false, "value_tag");
        public final static Property Value = new Property(4, String.class, "value", false, "value");
        public final static Property UpdateTime = new Property(5, java.util.Date.class, "updateTime", false, "update_time");
    }


    public DBEntryValueDao(DaoConfig config) {
        super(config);
    }

    public DBEntryValueDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBENTRY_VALUE\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"key\" TEXT NOT NULL ," + // 1: key
                "\"tag\" TEXT," + // 2: tag
                "\"value_tag\" TEXT," + // 3: valueTag
                "\"value\" TEXT," + // 4: value
                "\"update_time\" INTEGER);"); // 5: updateTime
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBENTRY_VALUE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBEntryValue entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getKey());

        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(3, tag);
        }

        String valueTag = entity.getValueTag();
        if (valueTag != null) {
            stmt.bindString(4, valueTag);
        }

        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(5, value);
        }

        java.util.Date updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(6, updateTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBEntryValue entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getKey());

        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(3, tag);
        }

        String valueTag = entity.getValueTag();
        if (valueTag != null) {
            stmt.bindString(4, valueTag);
        }

        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(5, value);
        }

        java.util.Date updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(6, updateTime.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }

    @Override
    public DBEntryValue readEntity(Cursor cursor, int offset) {
        DBEntryValue entity = new DBEntryValue( //
                cursor.getLong(offset + 0), // id
                cursor.getString(offset + 1), // key
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tag
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // valueTag
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // value
                cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // updateTime
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, DBEntryValue entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setKey(cursor.getString(offset + 1));
        entity.setTag(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setValueTag(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setValue(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUpdateTime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
    }

    @Override
    protected final Long updateKeyAfterInsert(DBEntryValue entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(DBEntryValue entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBEntryValue entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
