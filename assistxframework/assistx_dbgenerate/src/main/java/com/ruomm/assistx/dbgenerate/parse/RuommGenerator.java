package com.ruomm.assistx.dbgenerate.parse;

import com.ruomm.assistx.dbgenerate.helper.DbGeneratorHelper;
import org.mybatis.generator.api.CommentGenerator;
import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.dom.java.*;
import org.mybatis.generator.api.dom.xml.TextElement;
import org.mybatis.generator.api.dom.xml.XmlElement;
import org.mybatis.generator.config.MergeConstants;
import org.mybatis.generator.config.PropertyRegistry;
import org.mybatis.generator.internal.util.StringUtility;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import java.util.Set;

import static org.mybatis.generator.internal.util.StringUtility.isTrue;

public class RuommGenerator implements CommentGenerator {
    private final static String STRING_DOUBLE_QUOTE = "\"";
    private Properties properties;

    private boolean suppressDate;

    private boolean suppressAllComments;

    /**
     * If suppressAllComments is true, this option is ignored.
     */
    private boolean addRemarkComments;

    /**
     * 是否使用lombok插件来生成getter、setter、toString方法，默认false
     */
    private boolean useLombok = false;

    /**
     * 是否生成@Id、@Column、@Table注解，默认false
     */
    private boolean dbAnnotation = false;

    /**
     * 生成@Column的注解是否添加length属性，默认false
     */
    public boolean dbColumnLength = false;

    /**
     * 生成@Column的注解是否添加nullable属性，默认false
     */
    public boolean dbColumnNullable = false;
    /**
     * 是否添加hibernate的@DynamicUpdate注解，默认false
     */
    private boolean hibernateAnnotation = false;

    /*
     *  自定义GeneratorHelper辅助类，若是为空则使用自定义GeneratorHelper来生成部分属性
     */
    private DbGeneratorHelper generatorHelper = null;
    private SimpleDateFormat dateFormat;

    public RuommGenerator() {
        super();
        properties = new Properties();
        suppressDate = false;
        suppressAllComments = false;
        addRemarkComments = false;
    }

    @Override
    public void addJavaFileComment(CompilationUnit compilationUnit) {
        // add no file level comments by default
    }

    /**
     * Adds a suitable comment to warn users that the element was generated, and when it was generated.
     *
     * @param xmlElement the xml element
     */
    @Override
    public void addComment(XmlElement xmlElement) {
        if (suppressAllComments) {
            return;
        }

        xmlElement.addElement(new TextElement("<!--")); //$NON-NLS-1$

        StringBuilder sb = new StringBuilder();
        sb.append("  WARNING - "); //$NON-NLS-1$
        sb.append(MergeConstants.NEW_ELEMENT_TAG);
        xmlElement.addElement(new TextElement(sb.toString()));
        xmlElement
                .addElement(new TextElement(
                        "  This element is automatically generated by MyBatis Generator, do not modify.")); //$NON-NLS-1$

        String s = getDateString();
        if (s != null) {
            sb.setLength(0);
            sb.append("  This element was generated on "); //$NON-NLS-1$
            sb.append(s);
            sb.append('.');
            xmlElement.addElement(new TextElement(sb.toString()));
        }

        xmlElement.addElement(new TextElement("-->")); //$NON-NLS-1$
    }

    @Override
    public void addRootComment(XmlElement rootElement) {
        // add no document level comments by default
    }

    @Override
    public void addConfigurationProperties(Properties properties) {
        this.properties.putAll(properties);

        suppressDate = isTrue(properties
                .getProperty(PropertyRegistry.COMMENT_GENERATOR_SUPPRESS_DATE));

        suppressAllComments = isTrue(properties
                .getProperty(PropertyRegistry.COMMENT_GENERATOR_SUPPRESS_ALL_COMMENTS));

        addRemarkComments = isTrue(properties
                .getProperty(PropertyRegistry.COMMENT_GENERATOR_ADD_REMARK_COMMENTS));
        useLombok = DbGeneratorUtils.isTureProperties(properties, DbGeneratorConfig.GENERATOR_KEY_USE_LOMBOK, false);
        dbAnnotation = DbGeneratorUtils.isTureProperties(properties, DbGeneratorConfig.GENERATOR_KEY_DB_ANNOTATION, false);
        dbColumnLength = DbGeneratorUtils.isTureProperties(properties, DbGeneratorConfig.GENERATOR_KEY_DB_COLUMN_LENGTH, false);
        dbColumnNullable = DbGeneratorUtils.isTureProperties(properties, DbGeneratorConfig.GENERATOR_KEY_DB_COLUMN_NULLABLE, false);
        hibernateAnnotation = DbGeneratorUtils.isTureProperties(properties, DbGeneratorConfig.GENERATOR_KEY_HIBERNAME_ANNOTATION, false);
        String dateFormatString = properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_DATE_FORMAT);
        if (StringUtility.stringHasValue(dateFormatString)) {
            dateFormat = new SimpleDateFormat(dateFormatString);
        } else {
            dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        }
        String generatorHelperVal = properties.getProperty(DbGeneratorConfig.HELPER_GeneratorHelper);
        if (null == generatorHelperVal || generatorHelperVal.length() <= 0) {
            this.generatorHelper = null;
        } else {
            try {
                this.generatorHelper = (DbGeneratorHelper) Class.forName(generatorHelperVal).newInstance();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * This method adds the custom javadoc tag for. You may do nothing if you do not wish to include the Javadoc tag -
     * however, if you do not include the Javadoc tag then the Java merge capability of the eclipse plugin will break.
     *
     * @param javaElement       the java element
     * @param markAsDoNotDelete the mark as do not delete
     */
    protected void addJavadocTag(JavaElement javaElement,
                                 boolean markAsDoNotDelete) {
        javaElement.addJavaDocLine(" *"); //$NON-NLS-1$
        StringBuilder sb = new StringBuilder();
        sb.append(" * "); //$NON-NLS-1$
        sb.append(MergeConstants.NEW_ELEMENT_TAG);
        if (markAsDoNotDelete) {
            sb.append(" do_not_delete_during_merge"); //$NON-NLS-1$
        }
        String s = getDateString();
        if (s != null) {
            sb.append(' ');
            sb.append(s);
        }
        javaElement.addJavaDocLine(sb.toString());
    }

    /**
     * This method adds the custom javadoc tag for. You may do nothing if you do not wish to include the Javadoc tag -
     * however, if you do not include the Javadoc tag then the Java merge capability of the eclipse plugin will break.
     *
     * @param javaElement       the java element
     * @param markAsDoNotDelete the mark as do not delete
     */
    protected void addJavaReadme(JavaElement javaElement,
                                 boolean markAsDoNotDelete) {
        javaElement.addJavaDocLine(" *"); //$NON-NLS-1$
        StringBuilder sb = new StringBuilder();
        sb.append(" * "); //$NON-NLS-1$
        sb.append("");
        if (markAsDoNotDelete) {
            sb.append(" do_not_delete_during_merge"); //$NON-NLS-1$
        }
        String s = getDateString();
        if (s != null) {
            sb.append(' ');
            sb.append(s);
        }
        javaElement.addJavaDocLine(sb.toString());
    }

    /**
     * Returns a formated date string to include in the Javadoc tag
     * and XML comments. You may return null if you do not want the date in
     * these documentation elements.
     *
     * @return a string representing the current timestamp, or null
     */
    protected String getDateString() {
        if (suppressDate) {
            return null;
        } else if (dateFormat != null) {
            return dateFormat.format(new Date());
        } else {
            return new Date().toString();
        }
    }

    @Override
    public void addClassComment(InnerClass innerClass,
                                IntrospectedTable introspectedTable) {
        if (suppressAllComments) {
            return;
        }

        StringBuilder sb = new StringBuilder();

        innerClass.addJavaDocLine("/**"); //$NON-NLS-1$
        innerClass
                .addJavaDocLine(" * This class was generated by MyBatis Generator."); //$NON-NLS-1$

        sb.append(" * This class corresponds to the database table "); //$NON-NLS-1$
        sb.append(introspectedTable.getFullyQualifiedTable());
        innerClass.addJavaDocLine(sb.toString());

//        addJavadocTag(innerClass, false);

        innerClass.addJavaDocLine(" */"); //$NON-NLS-1$
    }

    @Override
    public void addClassComment(InnerClass innerClass,
                                IntrospectedTable introspectedTable, boolean markAsDoNotDelete) {
        if (suppressAllComments) {
            return;
        }

        StringBuilder sb = new StringBuilder();

        innerClass.addJavaDocLine("/**"); //$NON-NLS-1$
        innerClass
                .addJavaDocLine(" * This class was generated by MyBatis Generator."); //$NON-NLS-1$

        sb.append(" * This class corresponds to the database table "); //$NON-NLS-1$
        sb.append(introspectedTable.getFullyQualifiedTable());
        innerClass.addJavaDocLine(sb.toString());

//        addJavadocTag(innerClass, markAsDoNotDelete);

        innerClass.addJavaDocLine(" */"); //$NON-NLS-1$
    }

    @Override
    public void addModelClassComment(TopLevelClass topLevelClass,
                                     IntrospectedTable introspectedTable) {
        // 使用配置文件添加自定义引用
        if (useLombok) {
//            topLevelClass.addImportedType("lombok.Data");
            topLevelClass.addImportedType("lombok.Getter");
            topLevelClass.addImportedType("lombok.Setter");
            topLevelClass.addImportedType("lombok.ToString");
        }
        if (dbAnnotation) {
            topLevelClass.addImportedType("javax.persistence.*");
        }
        if (hibernateAnnotation) {
            topLevelClass.addImportedType("org.hibernate.annotations.DynamicUpdate");
        }
        // 使用自定义GeneratorHelper添加自定义引用
        if (null != generatorHelper) {
            generatorHelper.addModelClassImportedType(topLevelClass, introspectedTable);
        }

        if (suppressAllComments) {
            return;
        }
        topLevelClass.addJavaDocLine("/**");
        topLevelClass.addJavaDocLine(" * tableName：" + introspectedTable.getFullyQualifiedTable());
        if (addRemarkComments) {
            topLevelClass.addJavaDocLine(" * tableRemarks：" + DbGeneratorUtils.transBlankStr(introspectedTable.getRemarks()));
        }
        topLevelClass.addJavaDocLine(" * @copyright " + "wanruome-" + new SimpleDateFormat("yyyy").format(new Date()));
        // topLevelClass.addJavaDocLine(" * @author：" + systemPro.getProperty("user.name"));
        topLevelClass.addJavaDocLine(" * @author " + "wanruome");
        topLevelClass.addJavaDocLine(" * @create " + new SimpleDateFormat("yyyy-MM-dd HH:mm").format(new Date()));

        addJavadocTag(topLevelClass, true);

        topLevelClass.addJavaDocLine(" */");
        // 使用配置文件添加自定义注解
        if (dbAnnotation) {
            topLevelClass.addAnnotation("@Entity");
        }
        if (useLombok) {
//            topLevelClass.addAnnotation("@Data");
            topLevelClass.addAnnotation("@Getter");
            topLevelClass.addAnnotation("@Setter");
            topLevelClass.addAnnotation("@ToString");
        }
        if (hibernateAnnotation) {
            topLevelClass.addAnnotation("@DynamicUpdate");
        }
        if (dbAnnotation) {
            topLevelClass.addAnnotation("@Table(name = \"" + introspectedTable.getFullyQualifiedTable() + "\")");
        }
        // 使用自定义GeneratorHelper添加自定义注解
        if (null != generatorHelper) {
            generatorHelper.addModelClassAnnotation(topLevelClass, introspectedTable);
        }
    }

    @Override
    public void addEnumComment(InnerEnum innerEnum,
                               IntrospectedTable introspectedTable) {
        if (suppressAllComments) {
            return;
        }

        StringBuilder sb = new StringBuilder();

        innerEnum.addJavaDocLine("/**"); //$NON-NLS-1$
        innerEnum
                .addJavaDocLine(" * This enum was generated by MyBatis Generator."); //$NON-NLS-1$

        sb.append(" * This enum corresponds to the database table "); //$NON-NLS-1$
        sb.append(introspectedTable.getFullyQualifiedTable());
        innerEnum.addJavaDocLine(sb.toString());

//        addJavadocTag(innerEnum, false);

        innerEnum.addJavaDocLine(" */"); //$NON-NLS-1$
    }

    @Override
    public void addFieldComment(Field field,
                                IntrospectedTable introspectedTable,
                                IntrospectedColumn introspectedColumn) {
        if (suppressAllComments) {
            return;
        }
        field.addJavaDocLine("/**"); //$NON-NLS-1$
        // 添加column和datatype注释
        StringBuilder sb = new StringBuilder();
        sb.append(" * column: ");
        sb.append(introspectedTable.getFullyQualifiedTable());
        sb.append('.');
        sb.append(introspectedColumn.getActualColumnName());
        sb.append(", datatype: ");
        sb.append(introspectedColumn.getJdbcTypeName());
        sb.append(", length: ");
        sb.append(introspectedColumn.getLength());
//        if (dbColumnNullable) {
//            sb.append(", nullable: ");
//            sb.append(introspectedColumn.isNullable());
//        }
        sb.append(", nullable: ");
        sb.append(introspectedColumn.isNullable());
        field.addJavaDocLine(sb.toString()); //$NON-NLS-1$
        // 添加remarks注释
        sb.setLength(0);
        String remarks = introspectedColumn.getRemarks();
        if (addRemarkComments && StringUtility.stringHasValue(remarks)) {
            field.addJavaDocLine(" * remark: " + remarks);
        }

//        addJavadocTag(field, false);

        field.addJavaDocLine(" */"); //$NON-NLS-1$
        // 使用配置文件添加自定义注解
        if (dbAnnotation) {
            DbGeneratorUtils.addColumnAndIdPersistence(field, introspectedTable, introspectedColumn, dbColumnLength, dbColumnNullable);
        }
        // 使用自定义GeneratorHelper添加自定义注解
        if (null != generatorHelper) {
            generatorHelper.addModelFieldAnnotation(field, introspectedTable, introspectedColumn);
        }
    }

    @Override
    public void addFieldComment(Field field, IntrospectedTable introspectedTable) {
        if (suppressAllComments) {
            return;
        }

        StringBuilder sb = new StringBuilder();

        field.addJavaDocLine("/**"); //$NON-NLS-1$
        field
                .addJavaDocLine(" * This field was generated by MyBatis Generator."); //$NON-NLS-1$

        sb.append(" * This field corresponds to the database table "); //$NON-NLS-1$
        sb.append(introspectedTable.getFullyQualifiedTable());
        field.addJavaDocLine(sb.toString());

//        addJavadocTag(field, false);

        field.addJavaDocLine(" */"); //$NON-NLS-1$
    }

    @Override
    public void addGeneralMethodComment(Method method,
                                        IntrospectedTable introspectedTable) {
        if (suppressAllComments) {
            return;
        }

        StringBuilder sb = new StringBuilder();

        method.addJavaDocLine("/**"); //$NON-NLS-1$
        method
                .addJavaDocLine(" * This method was generated by MyBatis Generator."); //$NON-NLS-1$

        sb.append(" * This method corresponds to the database table "); //$NON-NLS-1$
        sb.append(introspectedTable.getFullyQualifiedTable());
        method.addJavaDocLine(sb.toString());

//        addJavadocTag(method, false);

        method.addJavaDocLine(" */"); //$NON-NLS-1$
    }

    @Override
    public void addGetterComment(Method method,
                                 IntrospectedTable introspectedTable,
                                 IntrospectedColumn introspectedColumn) {
        if (suppressAllComments) {
            return;
        }

        StringBuilder sb = new StringBuilder();

        method.addJavaDocLine("/**"); //$NON-NLS-1$
        String remarks = introspectedColumn.getRemarks();
        //添加remarks注释
        if (addRemarkComments && StringUtility.stringHasValue(remarks)) {
            sb.append(" * ");
            sb.append(introspectedColumn.getRemarks());
            method.addJavaDocLine(sb.toString());
            sb.setLength(0);
        }

        // 添加column return注释
        sb.append(" * @return value of the column: "); //$NON-NLS-1$
        sb.append(introspectedTable.getFullyQualifiedTable());
        sb.append('.');
        sb.append(introspectedColumn.getActualColumnName());
        method.addJavaDocLine(sb.toString());

//        addJavadocTag(method, false);

        method.addJavaDocLine(" */"); //$NON-NLS-1$
    }

    @Override
    public void addSetterComment(Method method,
                                 IntrospectedTable introspectedTable,
                                 IntrospectedColumn introspectedColumn) {
        if (suppressAllComments) {
            return;
        }

        StringBuilder sb = new StringBuilder();

        method.addJavaDocLine("/**"); //$NON-NLS-1$
        String remarks = introspectedColumn.getRemarks();
        //添加remarks注释
        if (addRemarkComments && StringUtility.stringHasValue(remarks)) {
            sb.append(" * ");
            sb.append(introspectedColumn.getRemarks());
            method.addJavaDocLine(sb.toString());
            sb.setLength(0);
        }

        Parameter parm = method.getParameters().get(0);
        sb.append(" * @param "); //$NON-NLS-1$
        sb.append(parm.getName());
        sb.append(" the value for the column: "); //$NON-NLS-1$
        sb.append(introspectedTable.getFullyQualifiedTable());
        sb.append('.');
        sb.append(introspectedColumn.getActualColumnName());
        method.addJavaDocLine(sb.toString());

//        addJavadocTag(method, false);

        method.addJavaDocLine(" */"); //$NON-NLS-1$
    }

    @Override
    public void addGeneralMethodAnnotation(Method method, IntrospectedTable introspectedTable,
                                           Set<FullyQualifiedJavaType> imports) {
//        imports.add(new FullyQualifiedJavaType("javax.annotation.Generated")); //$NON-NLS-1$
//        String comment = "Source Table: " + introspectedTable.getFullyQualifiedTable().toString(); //$NON-NLS-1$
//        method.addAnnotation(getGeneratedAnnotation(comment));
        System.out.println(method.getName());
    }

    @Override
    public void addGeneralMethodAnnotation(Method method, IntrospectedTable introspectedTable,
                                           IntrospectedColumn introspectedColumn, Set<FullyQualifiedJavaType> imports) {
//        imports.add(new FullyQualifiedJavaType("javax.annotation.Generated")); //$NON-NLS-1$
//        String comment = "Source field: " //$NON-NLS-1$
//                + introspectedTable.getFullyQualifiedTable().toString()
//                + "." //$NON-NLS-1$
//                + introspectedColumn.getActualColumnName();
//        method.addAnnotation(getGeneratedAnnotation(comment));
        System.out.println(method.getName());
    }

    @Override
    public void addFieldAnnotation(Field field, IntrospectedTable introspectedTable,
                                   Set<FullyQualifiedJavaType> imports) {
//        imports.add(new FullyQualifiedJavaType("javax.annotation.Generated")); //$NON-NLS-1$
//        String comment = "Source Table: " + introspectedTable.getFullyQualifiedTable().toString(); //$NON-NLS-1$
//        field.addAnnotation(getGeneratedAnnotation(comment));
        System.out.println(field.getName());
    }

    @Override
    public void addFieldAnnotation(Field field, IntrospectedTable introspectedTable,
                                   IntrospectedColumn introspectedColumn, Set<FullyQualifiedJavaType> imports) {
        System.out.println(field.getName());
        field.addAnnotation("@Column(name = \"" + field.getName() + "\")");
    }

    @Override
    public void addClassAnnotation(InnerClass innerClass, IntrospectedTable introspectedTable,
                                   Set<FullyQualifiedJavaType> imports) {
        System.out.println(innerClass);
    }
}